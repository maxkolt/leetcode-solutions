import {expect, test} from 'vitest'
/*
    1Ô∏è‚É£ –°—Å—ã–ª–∫–∞: https://leetcode.com/problems/two-sum/description/

    2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ
1. –°—É–º–º–∞ –¥–≤—É—Ö
–£—á–∏—Ç—ã–≤–∞—è –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª nums –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ target, –≤–µ—Ä–Ω–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–≤—É—Ö —á–∏—Å–µ–ª —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,
—á—Ç–æ–±—ã –æ–Ω–∏ –≤ —Å—É–º–º–µ —Ä–∞–≤–Ω—è–ª–∏—Å—å target.

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –≤–≤–æ–¥ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ,
–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —ç–ª–µ–º–µ–Ω—Ç –¥–≤–∞–∂–¥—ã.

–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.

    –ü—Ä–∏–º–µ—Ä 1:
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: nums = [2,7,11,15], target = 9
        –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [0,1]  ( ‚û°Ô∏è expect )
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü–æ—Å–∫–æ–ª—å–∫—É nums[0] + nums[1] == 9, –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [0, 1].
    –ü—Ä–∏–º–µ—Ä 2:
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —á–∏—Å–ª–∞ = [3,2,4], —Ü–µ–ª—å = 6
        –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [1,2] ( ‚û°Ô∏è expect )
    –ü—Ä–∏–º–µ—Ä 3:
        –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —á–∏—Å–ª–∞ = [3,3], —Ü–µ–ª—å = 6
        –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [0,1] ( ‚û°Ô∏è expect )
 */

// üßöüßöüßöüßöüßö –†–µ—à–µ–Ω–∏–µ
function twoSum(nums: number[], target: number): number[] {
    const indices: Record<number, number> = {};
    for (let i = 0; i < nums.length; i++) {
        indices[nums[i]] = i;
    }

    for (let i = 0; i < nums.length; i++) {
        const complimentValue = target - nums[i];
        const complimentIndex = indices[complimentValue];
        if (i !== complimentIndex && complimentIndex !== undefined)
            return [i, complimentIndex];
    }

    throw new Error("Did not find a solution. This should not occur.");
}

// üê∏üê∏üê∏üê∏üê∏
// üê∏TEST:
// üê∏üê∏üê∏üê∏üê∏
describe("twoSum Test", () => {

    test('–°—É–º–º–∞ –¥–≤—É—Ö (–ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç)', () => {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const nums: number[] = [2, 7, 11, 15]
        const target = 9

        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        const result: number[] = twoSum(nums, target);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞
        expect(         // –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ ‚û°Ô∏è
            result // —Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–≤–µ—Ä–Ω—É–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è)
        )
            .toEqual(   // —Ä–æ–≤–Ω—è–µ—Ç—Å—è
                [0, 1]
            )
    })
});
